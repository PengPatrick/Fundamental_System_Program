// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/30/2022 19:43:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          barrel_shift
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module barrel_shift_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [4:0] amt;
reg opt;
// wires                                               
wire [31:0] Out;

// assign statements (if any)                          
barrel_shift i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.Out(Out),
	.amt(amt),
	.opt(opt)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 31 ]
initial
begin
	A[31] = 1'b1;
	A[31] = #210000 1'b0;
	A[31] = #100000 1'b1;
	A[31] = #180000 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b1;
	A[30] = #210000 1'b0;
	A[30] = #100000 1'b1;
	A[30] = #180000 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b1;
	A[29] = #210000 1'b0;
	A[29] = #100000 1'b1;
	A[29] = #180000 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b1;
	A[28] = #390000 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b1;
	A[27] = #390000 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b1;
	A[26] = #390000 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b1;
	A[25] = #390000 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b1;
	A[24] = #390000 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b1;
	A[23] = #390000 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b1;
	A[22] = #490000 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b1;
	A[21] = #490000 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b1;
	A[20] = #490000 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b1;
	A[19] = #490000 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b1;
	A[18] = #490000 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b1;
	A[17] = #210000 1'b0;
	A[17] = #180000 1'b1;
	A[17] = #100000 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b1;
	A[16] = #210000 1'b0;
	A[16] = #180000 1'b1;
	A[16] = #100000 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b1;
	A[15] = #210000 1'b0;
	A[15] = #180000 1'b1;
	A[15] = #100000 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b1;
	A[14] = #210000 1'b0;
	A[14] = #180000 1'b1;
	A[14] = #100000 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
	A[13] = #100000 1'b1;
	A[13] = #390000 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
	A[12] = #100000 1'b1;
	A[12] = #390000 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
	A[11] = #100000 1'b1;
	A[11] = #390000 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
	A[10] = #100000 1'b1;
	A[10] = #390000 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
	A[9] = #100000 1'b1;
	A[9] = #390000 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
	A[8] = #100000 1'b1;
	A[8] = #390000 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #100000 1'b1;
	A[7] = #390000 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #100000 1'b1;
	A[6] = #390000 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #100000 1'b1;
	A[5] = #290000 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #100000 1'b1;
	A[4] = #290000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #100000 1'b1;
	A[3] = #290000 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #100000 1'b1;
	A[2] = #290000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #100000 1'b1;
	A[1] = #290000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #100000 1'b1;
	A[0] = #290000 1'b0;
end 
// amt[ 4 ]
initial
begin
	amt[4] = 1'b1;
	amt[4] = #100000 1'b0;
end 
// amt[ 3 ]
initial
begin
	amt[3] = 1'b0;
end 
// amt[ 2 ]
initial
begin
	amt[2] = 1'b0;
	amt[2] = #390000 1'b1;
	amt[2] = #100000 1'b0;
end 
// amt[ 1 ]
initial
begin
	amt[1] = 1'b0;
	amt[1] = #210000 1'b1;
	amt[1] = #180000 1'b0;
end 
// amt[ 0 ]
initial
begin
	amt[0] = 1'b0;
	amt[0] = #100000 1'b1;
	amt[0] = #110000 1'b0;
	amt[0] = #100000 1'b1;
	amt[0] = #80000 1'b0;
end 

// opt
initial
begin
	opt = 1'b0;
end 
endmodule

