// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/19/2022 11:09:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RCA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RCA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A;
reg [15:0] B;
reg Cin;
// wires                                               
wire Cout;
wire [15:0] Sum;

// assign statements (if any)                          
RCA i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Cin(Cin),
	.Cout(Cout),
	.Sum(Sum)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b1;
	A[15] = #80000 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
	A[13] = #80000 1'b1;
	A[13] = #100000 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
	A[12] = #80000 1'b1;
	A[12] = #100000 1'b0;
	A[12] = #80000 1'b1;
	A[12] = #150000 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
	A[11] = #80000 1'b1;
	A[11] = #100000 1'b0;
	A[11] = #80000 1'b1;
	A[11] = #150000 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
	A[10] = #80000 1'b1;
	A[10] = #100000 1'b0;
	A[10] = #80000 1'b1;
	A[10] = #150000 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
	A[9] = #80000 1'b1;
	A[9] = #100000 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
	A[7] = #180000 1'b1;
	A[7] = #140000 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
	A[6] = #180000 1'b1;
	A[6] = #140000 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
	A[5] = #180000 1'b1;
	A[5] = #140000 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #260000 1'b1;
	A[4] = #120000 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b1;
	A[3] = #180000 1'b0;
	A[3] = #80000 1'b1;
	A[3] = #120000 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
	A[2] = #180000 1'b0;
	A[2] = #80000 1'b1;
	A[2] = #120000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
	A[1] = #180000 1'b0;
	A[1] = #80000 1'b1;
	A[1] = #120000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #260000 1'b1;
	A[0] = #120000 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b1;
	B[15] = #80000 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b1;
	B[14] = #190000 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b1;
	B[13] = #190000 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b1;
	B[12] = #360000 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
	B[11] = #190000 1'b1;
	B[11] = #170000 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
	B[10] = #80000 1'b1;
	B[10] = #280000 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
	B[9] = #80000 1'b1;
	B[9] = #110000 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
	B[8] = #80000 1'b1;
	B[8] = #110000 1'b0;
	B[8] = #170000 1'b1;
	B[8] = #50000 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
	B[7] = #360000 1'b1;
	B[7] = #50000 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
	B[6] = #360000 1'b1;
	B[6] = #50000 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
	B[5] = #130000 1'b1;
	B[5] = #150000 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
	B[4] = #130000 1'b1;
	B[4] = #150000 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b1;
	Cin = #110000 1'b0;
end 
endmodule

